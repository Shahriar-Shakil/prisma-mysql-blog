// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  firstName  String @db.VarChar(50)
  lastName  String @db.VarChar(50)
  mobile  String @db.VarChar(15)
  email  String @db.VarChar(50)
  passwordHash  String @db.VarChar(32)
  role RoleType
  posts Post[]
  postComments PostComment[]

}
model Post {
  id Int @id @default(autoincrement())
  title String @db.VarChar(75)
  metaTitle String? @db.VarChar(100)
  slug String @unique @db.VarChar(100)
  summary String? @db.TinyText
  published  Boolean   @default(false)
  createdAt    DateTime @default(now()) @db.Timestamp(0) 
  updatedAt    DateTime @default(now()) @db.Timestamp(0)
  publishedAt  DateTime? @db.Timestamp(0)
  content      String?   @db.Text
  authorId     Int
  author User @relation(fields: [authorId],references: [id],onDelete: Restrict,onUpdate: Cascade)
  postmeta PostMeta?
  postComments PostComment[]
  postCategory PostCategory[]
  tags PostTag[]
}

model PostMeta {
  id Int @id @default(autoincrement())
  key String @db.VarChar(50)
  content String? @db.Text
  postId Int @unique
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model PostComment{
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  content String @db.Text

  createdAt    DateTime @default(now()) @db.Timestamp(0) 
  updatedAt    DateTime @default(now()) @db.Timestamp(0)
  
  postId Int
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Restrict,onUpdate: Cascade)
}

model Category{
  id Int @id @default(autoincrement())
  title String @db.VarChar(75)
  metaTitle String? @db.VarChar(100)
  slug String @db.VarChar(100)
  content String? @db.Text
  postCategory PostCategory[]
}

model PostCategory{
  id Int @id @default(autoincrement())
  postId Int @unique
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  categoryId Int
  category Category @relation(fields: [categoryId],references: [id],onDelete: Restrict,onUpdate: Cascade)
}

model Tag{
  id Int @id @default(autoincrement())
  title String @db.VarChar(75)
  metaTitle String? @db.VarChar(100)
  slug String @db.VarChar(100)
  content String? @db.Text
  postTag PostTag[]
}

model PostTag{
  id Int @id @default(autoincrement())

  tagId Int @unique
  tag Tag @relation(fields: [tagId],references: [id],onDelete: Restrict,onUpdate: Cascade)

  postId Int 
  post Post @relation(fields: [postId],references: [id],onDelete: Restrict,onUpdate: Cascade)
}

enum RoleType {
  admin
  user
}